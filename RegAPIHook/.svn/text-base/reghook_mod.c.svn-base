#define MAX_BUF_LEN 512

static int ConvertFromWSTR(LPCWSTR lpWSTR, int wlen, LPSTR lpSTR, int len)
{
	return WideCharToMultiByte(CP_ACP, 0, lpWSTR, wlen, lpSTR, len, NULL, NULL);
}

// Note WSTR2STR is not thread-safe
static const char* WSTR2STR(LPCWSTR wstr)
{ 
	static char lpSTR[MAX_BUF_LEN];
	
	ConvertFromWSTR(wstr, wcslen(wstr), lpSTR, sizeof(lpSTR));
	return lpSTR;
}

/*
 * Hook handles
 */
DWORD Hook_hRegCloseKey;

DWORD Hook_hRegConnectRegistryA;

DWORD Hook_hRegConnectRegistryW;

DWORD Hook_hRegCreateKeyExA;

DWORD Hook_hRegCreateKeyExW;

DWORD Hook_hRegDeleteKeyA;

DWORD Hook_hRegDeleteKeyW;

DWORD Hook_hRegDeleteKeyExA;

DWORD Hook_hRegDeleteKeyExW;

DWORD Hook_hRegDeleteValueA;

DWORD Hook_hRegDeleteValueW;

DWORD Hook_hRegDisablePredefinedCache;

DWORD Hook_hRegDisableReflectionKey;

DWORD Hook_hRegEnableReflectionKey;

DWORD Hook_hRegEnumKeyEx;

DWORD Hook_hRegEnumValue;

DWORD Hook_hRegFlushKey;

DWORD Hook_hRegGetKeySecurity;

DWORD Hook_hRegGetValueA;

DWORD Hook_hRegGetValueW;

DWORD Hook_hRegLoadKeyA;

DWORD Hook_hRegLoadKeyW;

DWORD Hook_hRegNotifyChangeKeyValue;

DWORD Hook_hRegOpenCurrentUser;

DWORD Hook_hRegOpenKeyExA;

DWORD Hook_hRegOpenKeyExW;

DWORD Hook_hRegOpenUserClassesRoot;

DWORD Hook_hRegOverridePredefKey;

DWORD Hook_hRegQueryInfoKey;

DWORD Hook_hRegQueryMultipleValues;

DWORD Hook_hRegQueryReflectionKey;

DWORD Hook_hRegQueryValueExA;

DWORD Hook_hRegQueryValueExW;

DWORD Hook_hRegReplaceKeyA;

DWORD Hook_hRegReplaceKeyW;

DWORD Hook_hRegRestoreKeyA;

DWORD Hook_hRegRestoreKeyW;

DWORD Hook_hRegSaveKeyA;

DWORD Hook_hRegSaveKeyW;

DWORD Hook_hRegSaveKeyExA;

DWORD Hook_hRegSaveKeyExW;

DWORD Hook_hRegSetKeySecurity;

DWORD Hook_hRegSetValueExA;

DWORD Hook_hRegSetValueExW;

DWORD Hook_hRegUnLoadKeyA;

DWORD Hook_hRegUnLoadKeyW;


/*
 * Original function entries
 */
 LONG (WINAPI *Orig_RegCloseKey)(HKEY hKey);

 LONG (WINAPI *Orig_RegConnectRegistryA)(LPCSTR lpMachineName, HKEY hKey, PHKEY phkResult);

 LONG (WINAPI *Orig_RegConnectRegistryW)(LPCWSTR lpMachineName, HKEY hKey, PHKEY phkResult);

 LONG (WINAPI *Orig_RegCreateKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD Reserved, LPTSTR lpClass, DWORD dwOptions, REGSAM samDesired, LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, LPDWORD lpdwDisposition);

 LONG (WINAPI *Orig_RegCreateKeyExW)(HKEY hKey, LPCWSTR lpSubKey, DWORD Reserved, LPTSTR lpClass, DWORD dwOptions, REGSAM samDesired, LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, LPDWORD lpdwDisposition);

 LONG (WINAPI *Orig_RegDeleteKeyA)(HKEY hKey, LPCSTR lpSubKey);

 LONG (WINAPI *Orig_RegDeleteKeyW)(HKEY hKey, LPCWSTR lpSubKey);

 LONG (WINAPI *Orig_RegDeleteKeyExA)(HKEY hKey, LPCSTR lpSubKey, REGSAM samDesired, DWORD Reserved);

 LONG (WINAPI *Orig_RegDeleteKeyExW)(HKEY hKey, LPCWSTR lpSubKey, REGSAM samDesired, DWORD Reserved);

 LONG (WINAPI *Orig_RegDeleteValueA)(HKEY hKey, LPCSTR lpValueName);

 LONG (WINAPI *Orig_RegDeleteValueW)(HKEY hKey, LPCWSTR lpValueName);

 LONG (WINAPI *Orig_RegDisablePredefinedCache)();

 LONG (WINAPI *Orig_RegDisableReflectionKey)(HKEY hBase);

 LONG (WINAPI *Orig_RegEnableReflectionKey)(HKEY hBase);

 LONG (WINAPI *Orig_RegEnumKeyEx)(HKEY hKey, DWORD dwIndex, LPTSTR lpName, LPDWORD lpcName, LPDWORD lpReserved, LPTSTR lpClass, LPDWORD lpcClass, PFILETIME lpftLastWriteTime);

 LONG (WINAPI *Orig_RegEnumValue)(HKEY hKey, DWORD dwIndex, LPTSTR lpValueName, LPDWORD lpcValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData);

 LONG (WINAPI *Orig_RegFlushKey)(HKEY hKey);

 LONG (WINAPI *Orig_RegGetKeySecurity)(HKEY hKey, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, LPDWORD lpcbSecurityDescriptor);

 LONG (WINAPI *Orig_RegGetValueA)(HKEY hkey, LPCSTR lpSubKey, LPCSTR lpValue, DWORD dwFlags, LPDWORD pdwType, PVOID pvData, LPDWORD pcbData);

 LONG (WINAPI *Orig_RegGetValueW)(HKEY hkey, LPCWSTR lpSubKey, LPCWSTR lpValue, DWORD dwFlags, LPDWORD pdwType, PVOID pvData, LPDWORD pcbData);

 LONG (WINAPI *Orig_RegLoadKeyA)(HKEY hKey, LPCSTR lpSubKey, LPCSTR lpFile);

 LONG (WINAPI *Orig_RegLoadKeyW)(HKEY hKey, LPCWSTR lpSubKey, LPCWSTR lpFile);

 LONG (WINAPI *Orig_RegNotifyChangeKeyValue)(HKEY hKey, BOOL bWatchSubtree, DWORD dwNotifyFilter, HANDLE hEvent, BOOL fAsynchronous);

 LONG (WINAPI *Orig_RegOpenCurrentUser)(REGSAM samDesired, PHKEY phkResult);

 LONG (WINAPI *Orig_RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult);

 LONG (WINAPI *Orig_RegOpenKeyExW)(HKEY hKey, LPCWSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult);

 LONG (WINAPI *Orig_RegOpenUserClassesRoot)(HANDLE hToken, DWORD dwOptions, REGSAM samDesired, PHKEY phkResult);

 LONG (WINAPI *Orig_RegOverridePredefKey)(HKEY hKey, HKEY hNewHKey);

 LONG (WINAPI *Orig_RegQueryInfoKey)(HKEY hKey, LPTSTR lpClass, LPDWORD lpcClass, LPDWORD lpReserved, LPDWORD lpcSubKeys, LPDWORD lpcMaxSubKeyLen, LPDWORD lpcMaxClassLen, LPDWORD lpcValues, LPDWORD lpcMaxValueNameLen, LPDWORD lpcMaxValueLen, LPDWORD lpcbSecurityDescriptor, PFILETIME lpftLastWriteTime);

 LONG (WINAPI *Orig_RegQueryMultipleValues)(HKEY hKey, PVALENT val_list, DWORD num_vals, LPTSTR lpValueBuf, LPDWORD ldwTotsize);

 LONG (WINAPI *Orig_RegQueryReflectionKey)(HKEY hBase, BOOL bIsReflectionDisabled);

 LONG (WINAPI *Orig_RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData);

 LONG (WINAPI *Orig_RegQueryValueExW)(HKEY hKey, LPCWSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData);

 LONG (WINAPI *Orig_RegReplaceKeyA)(HKEY hKey, LPCSTR lpSubKey, LPCSTR lpNewFile, LPCSTR lpOldFile);

 LONG (WINAPI *Orig_RegReplaceKeyW)(HKEY hKey, LPCWSTR lpSubKey, LPCWSTR lpNewFile, LPCWSTR lpOldFile);

 LONG (WINAPI *Orig_RegRestoreKeyA)(HKEY hKey, LPCSTR lpFile, DWORD dwFlags);

 LONG (WINAPI *Orig_RegRestoreKeyW)(HKEY hKey, LPCWSTR lpFile, DWORD dwFlags);

 LONG (WINAPI *Orig_RegSaveKeyA)(HKEY hKey, LPCSTR lpFile, LPSECURITY_ATTRIBUTES lpSecurityAttributes);

 LONG (WINAPI *Orig_RegSaveKeyW)(HKEY hKey, LPCWSTR lpFile, LPSECURITY_ATTRIBUTES lpSecurityAttributes);

 LONG (WINAPI *Orig_RegSaveKeyExA)(HKEY hKey, LPCSTR lpFile, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD Flags);

 LONG (WINAPI *Orig_RegSaveKeyExW)(HKEY hKey, LPCWSTR lpFile, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD Flags);

 LONG (WINAPI *Orig_RegSetKeySecurity)(HKEY hKey, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor);

 LONG (WINAPI *Orig_RegSetValueExA)(HKEY hKey, LPCSTR lpValueName, DWORD Reserved, DWORD dwType, const BYTE* lpData, DWORD cbData);

 LONG (WINAPI *Orig_RegSetValueExW)(HKEY hKey, LPCWSTR lpValueName, DWORD Reserved, DWORD dwType, const BYTE* lpData, DWORD cbData);

 LONG (WINAPI *Orig_RegUnLoadKeyA)(HKEY hKey, LPCSTR lpSubKey);

 LONG (WINAPI *Orig_RegUnLoadKeyW)(HKEY hKey, LPCWSTR lpSubKey);


/*
 * Hook functions
 */
 LONG WINAPI Hook_RegCloseKey(HKEY hKey) {
	RegAPILog.print("%s:RegCloseKey %X\n", g_appName, hKey);
	return Orig_RegCloseKey(hKey);
}

 LONG WINAPI Hook_RegConnectRegistryA(LPCSTR lpMachineName, HKEY hKey, PHKEY phkResult) {
	RegAPILog.print("%s:RegConnectRegistryA\n", g_appName);
	return Orig_RegConnectRegistryA(lpMachineName, hKey, phkResult);
}

 LONG WINAPI Hook_RegConnectRegistryW(LPCWSTR lpMachineName, HKEY hKey, PHKEY phkResult) {
	RegAPILog.print("%s:RegConnectRegistryW\n", g_appName);
	return Orig_RegConnectRegistryW(lpMachineName, hKey, phkResult);
}

 LONG WINAPI Hook_RegCreateKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD Reserved, LPTSTR lpClass, DWORD dwOptions, REGSAM samDesired, LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, LPDWORD lpdwDisposition) {
	LONG ret = Orig_RegCreateKeyExA(hKey, lpSubKey, Reserved, lpClass, dwOptions, samDesired, lpSecurityAttributes, phkResult, lpdwDisposition);
	RegAPILog.print("%s:RegCreateKeyExA [%s] = %X\n", g_appName, lpSubKey, phkResult ? *phkResult : NULL);
	return ret;
}

 LONG WINAPI Hook_RegCreateKeyExW(HKEY hKey, LPCWSTR lpSubKey, DWORD Reserved, LPTSTR lpClass, DWORD dwOptions, REGSAM samDesired, LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, LPDWORD lpdwDisposition) {
	LONG ret = Orig_RegCreateKeyExW(hKey, lpSubKey, Reserved, lpClass, dwOptions, samDesired, lpSecurityAttributes, phkResult, lpdwDisposition);
	RegAPILog.print("%s:RegCreateKeyExW [%s] = %X\n", g_appName, WSTR2STR(lpSubKey), phkResult ? *phkResult : NULL);
	return ret;
}

 LONG WINAPI Hook_RegDeleteKeyA(HKEY hKey, LPCSTR lpSubKey) {
	RegAPILog.print("%s:RegDeleteKeyA\n", g_appName);
	return Orig_RegDeleteKeyA(hKey, lpSubKey);
}

 LONG WINAPI Hook_RegDeleteKeyW(HKEY hKey, LPCWSTR lpSubKey) {
	RegAPILog.print("%s:RegDeleteKeyW\n", g_appName);
	return Orig_RegDeleteKeyW(hKey, lpSubKey);
}

 LONG WINAPI Hook_RegDeleteKeyExA(HKEY hKey, LPCSTR lpSubKey, REGSAM samDesired, DWORD Reserved) {
	RegAPILog.print("%s:RegDeleteKeyExA\n", g_appName);
	return Orig_RegDeleteKeyExA(hKey, lpSubKey, samDesired, Reserved);
}

 LONG WINAPI Hook_RegDeleteKeyExW(HKEY hKey, LPCWSTR lpSubKey, REGSAM samDesired, DWORD Reserved) {
	RegAPILog.print("%s:RegDeleteKeyExW\n", g_appName);
	return Orig_RegDeleteKeyExW(hKey, lpSubKey, samDesired, Reserved);
}

 LONG WINAPI Hook_RegDeleteValueA(HKEY hKey, LPCSTR lpValueName) {
	RegAPILog.print("%s:RegDeleteValueA\n", g_appName);
	return Orig_RegDeleteValueA(hKey, lpValueName);
}

 LONG WINAPI Hook_RegDeleteValueW(HKEY hKey, LPCWSTR lpValueName) {
	RegAPILog.print("%s:RegDeleteValueW\n", g_appName);
	return Orig_RegDeleteValueW(hKey, lpValueName);
}

 LONG WINAPI Hook_RegDisablePredefinedCache() {
	RegAPILog.print("%s:RegDisablePredefinedCache\n", g_appName);
	return Orig_RegDisablePredefinedCache();
}

 LONG WINAPI Hook_RegDisableReflectionKey(HKEY hBase) {
	RegAPILog.print("%s:RegDisableReflectionKey\n", g_appName);
	return Orig_RegDisableReflectionKey(hBase);
}

 LONG WINAPI Hook_RegEnableReflectionKey(HKEY hBase) {
	RegAPILog.print("%s:RegEnableReflectionKey\n", g_appName);
	return Orig_RegEnableReflectionKey(hBase);
}

 LONG WINAPI Hook_RegEnumKeyEx(HKEY hKey, DWORD dwIndex, LPTSTR lpName, LPDWORD lpcName, LPDWORD lpReserved, LPTSTR lpClass, LPDWORD lpcClass, PFILETIME lpftLastWriteTime) {
	RegAPILog.print("%s:RegEnumKeyEx\n", g_appName);
	return Orig_RegEnumKeyEx(hKey, dwIndex, lpName, lpcName, lpReserved, lpClass, lpcClass, lpftLastWriteTime);
}

 LONG WINAPI Hook_RegEnumValue(HKEY hKey, DWORD dwIndex, LPTSTR lpValueName, LPDWORD lpcValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData) {
	RegAPILog.print("%s:RegEnumValue\n", g_appName);
	return Orig_RegEnumValue(hKey, dwIndex, lpValueName, lpcValueName, lpReserved, lpType, lpData, lpcbData);
}

 LONG WINAPI Hook_RegFlushKey(HKEY hKey) {
	RegAPILog.print("%s:RegFlushKey\n", g_appName);
	return Orig_RegFlushKey(hKey);
}

 LONG WINAPI Hook_RegGetKeySecurity(HKEY hKey, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, LPDWORD lpcbSecurityDescriptor) {
	RegAPILog.print("%s:RegGetKeySecurity\n", g_appName);
	return Orig_RegGetKeySecurity(hKey, SecurityInformation, pSecurityDescriptor, lpcbSecurityDescriptor);
}

 LONG WINAPI Hook_RegGetValueA(HKEY hkey, LPCSTR lpSubKey, LPCSTR lpValue, DWORD dwFlags, LPDWORD pdwType, PVOID pvData, LPDWORD pcbData) {
	RegAPILog.print("%s:RegGetValueA %s\n", g_appName, lpSubKey);
	return Orig_RegGetValueA(hkey, lpSubKey, lpValue, dwFlags, pdwType, pvData, pcbData);
}

 LONG WINAPI Hook_RegGetValueW(HKEY hkey, LPCWSTR lpSubKey, LPCWSTR lpValue, DWORD dwFlags, LPDWORD pdwType, PVOID pvData, LPDWORD pcbData) {
	RegAPILog.print("%s:RegGetValueW %s\n", g_appName, WSTR2STR(lpSubKey));
	return Orig_RegGetValueW(hkey, lpSubKey, lpValue, dwFlags, pdwType, pvData, pcbData);
}

 LONG WINAPI Hook_RegLoadKeyA(HKEY hKey, LPCSTR lpSubKey, LPCSTR lpFile) {
	RegAPILog.print("%s:RegLoadKeyA\n", g_appName);
	return Orig_RegLoadKeyA(hKey, lpSubKey, lpFile);
}

 LONG WINAPI Hook_RegLoadKeyW(HKEY hKey, LPCWSTR lpSubKey, LPCWSTR lpFile) {
	RegAPILog.print("%s:RegLoadKeyW\n", g_appName);
	return Orig_RegLoadKeyW(hKey, lpSubKey, lpFile);
}

 LONG WINAPI Hook_RegNotifyChangeKeyValue(HKEY hKey, BOOL bWatchSubtree, DWORD dwNotifyFilter, HANDLE hEvent, BOOL fAsynchronous) {
	RegAPILog.print("%s:RegNotifyChangeKeyValue\n", g_appName);
	return Orig_RegNotifyChangeKeyValue(hKey, bWatchSubtree, dwNotifyFilter, hEvent, fAsynchronous);
}

 LONG WINAPI Hook_RegOpenCurrentUser(REGSAM samDesired, PHKEY phkResult) {
	RegAPILog.print("%s:RegOpenCurrentUser\n", g_appName);
	return Orig_RegOpenCurrentUser(samDesired, phkResult);
}

 LONG WINAPI Hook_RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult) {
	LONG ret = Orig_RegOpenKeyExA(hKey, lpSubKey, ulOptions, samDesired, phkResult);
	RegAPILog.print("%s:RegOpenKeyExA %s = %X\n", g_appName, lpSubKey, phkResult ? *phkResult : NULL);
	return ret;
}

 LONG WINAPI Hook_RegOpenKeyExW(HKEY hKey, LPCWSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult) {

	LONG ret = Orig_RegOpenKeyExW(hKey, lpSubKey, ulOptions, samDesired, phkResult);
	RegAPILog.print("%s:RegOpenKeyExW %s = %X\n", g_appName, WSTR2STR(lpSubKey), phkResult ? *phkResult : NULL);
	return ret;
}

 LONG WINAPI Hook_RegOpenUserClassesRoot(HANDLE hToken, DWORD dwOptions, REGSAM samDesired, PHKEY phkResult) {
	RegAPILog.print("%s:RegOpenUserClassesRoot\n", g_appName);
	return Orig_RegOpenUserClassesRoot(hToken, dwOptions, samDesired, phkResult);
}

 LONG WINAPI Hook_RegOverridePredefKey(HKEY hKey, HKEY hNewHKey) {
	RegAPILog.print("%s:RegOverridePredefKey\n", g_appName);
	return Orig_RegOverridePredefKey(hKey, hNewHKey);
}

 LONG WINAPI Hook_RegQueryInfoKey(HKEY hKey, LPTSTR lpClass, LPDWORD lpcClass, LPDWORD lpReserved, LPDWORD lpcSubKeys, LPDWORD lpcMaxSubKeyLen, LPDWORD lpcMaxClassLen, LPDWORD lpcValues, LPDWORD lpcMaxValueNameLen, LPDWORD lpcMaxValueLen, LPDWORD lpcbSecurityDescriptor, PFILETIME lpftLastWriteTime) {
	RegAPILog.print("%s:RegQueryInfoKey\n", g_appName);
	return Orig_RegQueryInfoKey(hKey, lpClass, lpcClass, lpReserved, lpcSubKeys, lpcMaxSubKeyLen, lpcMaxClassLen, lpcValues, lpcMaxValueNameLen, lpcMaxValueLen, lpcbSecurityDescriptor, lpftLastWriteTime);
}

 LONG WINAPI Hook_RegQueryMultipleValues(HKEY hKey, PVALENT val_list, DWORD num_vals, LPTSTR lpValueBuf, LPDWORD ldwTotsize) {
	RegAPILog.print("%s:RegQueryMultipleValues\n", g_appName);
	return Orig_RegQueryMultipleValues(hKey, val_list, num_vals, lpValueBuf, ldwTotsize);
}

 LONG WINAPI Hook_RegQueryReflectionKey(HKEY hBase, BOOL bIsReflectionDisabled) {
	RegAPILog.print("%s:RegQueryReflectionKey\n", g_appName);
	return Orig_RegQueryReflectionKey(hBase, bIsReflectionDisabled);
}

 LONG WINAPI Hook_RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData) {
	 // Causing crash in WINWORD.EXE
	 //RegAPILog.print("%s:RegQueryValueExA key:%X name:%s\n", g_appName, hKey, lpValueName);
	 RegAPILog.print("%s:RegQueryValueExA key:%X\n", g_appName, hKey);
	return Orig_RegQueryValueExA(hKey, lpValueName, lpReserved, lpType, lpData, lpcbData);
}

 LONG WINAPI Hook_RegQueryValueExW(HKEY hKey, LPCWSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData) {
	 // Causing crash in WINWORD.EXE
	 //RegAPILog.print("%s:RegQueryValueExW key:%X name:%s\n", g_appName, hKey, WSTR2STR(lpValueName));
	 RegAPILog.print("%s:RegQueryValueExW key:%X\n", g_appName, hKey);
	return Orig_RegQueryValueExW(hKey, lpValueName, lpReserved, lpType, lpData, lpcbData);
}

 LONG WINAPI Hook_RegReplaceKeyA(HKEY hKey, LPCSTR lpSubKey, LPCSTR lpNewFile, LPCSTR lpOldFile) {
	RegAPILog.print("%s:RegReplaceKeyA\n", g_appName);
	return Orig_RegReplaceKeyA(hKey, lpSubKey, lpNewFile, lpOldFile);
}

 LONG WINAPI Hook_RegReplaceKeyW(HKEY hKey, LPCWSTR lpSubKey, LPCWSTR lpNewFile, LPCWSTR lpOldFile) {
	RegAPILog.print("%s:RegReplaceKeyW\n", g_appName);
	return Orig_RegReplaceKeyW(hKey, lpSubKey, lpNewFile, lpOldFile);
}

 LONG WINAPI Hook_RegRestoreKeyA(HKEY hKey, LPCSTR lpFile, DWORD dwFlags) {
	RegAPILog.print("%s:RegRestoreKeyA\n", g_appName);
	return Orig_RegRestoreKeyA(hKey, lpFile, dwFlags);
}

 LONG WINAPI Hook_RegRestoreKeyW(HKEY hKey, LPCWSTR lpFile, DWORD dwFlags) {
	RegAPILog.print("%s:RegRestoreKeyW\n", g_appName);
	return Orig_RegRestoreKeyW(hKey, lpFile, dwFlags);
}

 LONG WINAPI Hook_RegSaveKeyA(HKEY hKey, LPCSTR lpFile, LPSECURITY_ATTRIBUTES lpSecurityAttributes) {
	RegAPILog.print("%s:RegSaveKeyA\n", g_appName);
	return Orig_RegSaveKeyA(hKey, lpFile, lpSecurityAttributes);
}

 LONG WINAPI Hook_RegSaveKeyW(HKEY hKey, LPCWSTR lpFile, LPSECURITY_ATTRIBUTES lpSecurityAttributes) {
	RegAPILog.print("%s:RegSaveKeyW\n", g_appName);
	return Orig_RegSaveKeyW(hKey, lpFile, lpSecurityAttributes);
}

 LONG WINAPI Hook_RegSaveKeyExA(HKEY hKey, LPCSTR lpFile, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD Flags) {
	RegAPILog.print("%s:RegSaveKeyExA\n", g_appName);
	return Orig_RegSaveKeyExA(hKey, lpFile, lpSecurityAttributes, Flags);
}

 LONG WINAPI Hook_RegSaveKeyExW(HKEY hKey, LPCWSTR lpFile, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD Flags) {
	RegAPILog.print("%s:RegSaveKeyExW\n", g_appName);
	return Orig_RegSaveKeyExW(hKey, lpFile, lpSecurityAttributes, Flags);
}

 LONG WINAPI Hook_RegSetKeySecurity(HKEY hKey, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor) {
	RegAPILog.print("%s:RegSetKeySecurity\n", g_appName);
	return Orig_RegSetKeySecurity(hKey, SecurityInformation, pSecurityDescriptor);
}

 LONG WINAPI Hook_RegSetValueExA(HKEY hKey, LPCSTR lpValueName, DWORD Reserved, DWORD dwType, const BYTE* lpData, DWORD cbData) {
	 /* Causing crash in WINWORD.EXE
	 RegAPILog.print("%s:RegSetValueExA key:%X name:%s\n", g_appName, hKey, lpValueName);
	 if (dwType == REG_SZ || dwType == REG_EXPAND_SZ)
		 RegAPILog.print(" value:%s len:%d\n", lpData, cbData);
	 else if (dwType == REG_DWORD)
		 RegAPILog.print(" value:%d len:%d\n", *lpData, cbData);
	 else
		 RegAPILog.print(" valueAddr:%p len:%d\n", lpData, cbData);
		 */
	 RegAPILog.print("%s:RegSetValueExA key:%X name:[%s]\n", g_appName, hKey, lpValueName);
	return Orig_RegSetValueExA(hKey, lpValueName, Reserved, dwType, lpData, cbData);
}

 LONG WINAPI Hook_RegSetValueExW(HKEY hKey, LPCWSTR lpValueName, DWORD Reserved, DWORD dwType, const BYTE* lpData, DWORD cbData) {
	 /* Causing crash in WINWORD.EXE
	 RegAPILog.print("%s:RegSetValueExW key:%X name:%s\n", g_appName, hKey, WSTR2STR(lpValueName));
	 if (dwType == REG_SZ || dwType == REG_EXPAND_SZ)
		 RegAPILog.print(" value:%s len:%d\n", lpData, cbData);
	 else if (dwType == REG_DWORD)
		 RegAPILog.print(" value:%d len:%d\n", *lpData, cbData);
	 else
		 RegAPILog.print(" valueAddr:%p len:%d\n", lpData, cbData);
		 */
	RegAPILog.print("%s:RegSetValueExW key:%X\n", g_appName, hKey);
	return Orig_RegSetValueExW(hKey, lpValueName, Reserved, dwType, lpData, cbData);
}

 LONG WINAPI Hook_RegUnLoadKeyA(HKEY hKey, LPCSTR lpSubKey) {
	RegAPILog.print("%s:RegUnLoadKeyA\n", g_appName);
	return Orig_RegUnLoadKeyA(hKey, lpSubKey);
}

 LONG WINAPI Hook_RegUnLoadKeyW(HKEY hKey, LPCWSTR lpSubKey) {
	RegAPILog.print("%s:RegUnLoadKeyW\n", g_appName);
	return Orig_RegUnLoadKeyW(hKey, lpSubKey);
}


/*
 * HookAllAPI: Enable all hook functions
 */
#define HOOKAPI(DLL, FUNC) Hook_h##FUNC=HookAPI(#DLL, #FUNC, (PROC)Hook_##FUNC, (PROC *)&Orig_##FUNC);
 
BOOL HookAllAPI()
{
	HOOKAPI(ADVAPI32.DLL,RegCloseKey);

	HOOKAPI(ADVAPI32.DLL,RegConnectRegistryA);

	HOOKAPI(ADVAPI32.DLL,RegConnectRegistryW);

	HOOKAPI(ADVAPI32.DLL,RegCreateKeyExA);

	HOOKAPI(ADVAPI32.DLL,RegCreateKeyExW);

	HOOKAPI(ADVAPI32.DLL,RegDeleteKeyA);

	HOOKAPI(ADVAPI32.DLL,RegDeleteKeyW);

	HOOKAPI(ADVAPI32.DLL,RegDeleteKeyExA);

	HOOKAPI(ADVAPI32.DLL,RegDeleteKeyExW);

	HOOKAPI(ADVAPI32.DLL,RegDeleteValueA);

	HOOKAPI(ADVAPI32.DLL,RegDeleteValueW);

	HOOKAPI(ADVAPI32.DLL,RegDisablePredefinedCache);

	HOOKAPI(ADVAPI32.DLL,RegDisableReflectionKey);

	HOOKAPI(ADVAPI32.DLL,RegEnableReflectionKey);

	HOOKAPI(ADVAPI32.DLL,RegEnumKeyEx);

	HOOKAPI(ADVAPI32.DLL,RegEnumValue);

	HOOKAPI(ADVAPI32.DLL,RegFlushKey);

	HOOKAPI(ADVAPI32.DLL,RegGetKeySecurity);

	HOOKAPI(ADVAPI32.DLL,RegGetValueA);

	HOOKAPI(ADVAPI32.DLL,RegGetValueW);

	HOOKAPI(ADVAPI32.DLL,RegLoadKeyA);

	HOOKAPI(ADVAPI32.DLL,RegLoadKeyW);

	HOOKAPI(ADVAPI32.DLL,RegNotifyChangeKeyValue);

	HOOKAPI(ADVAPI32.DLL,RegOpenCurrentUser);

	HOOKAPI(ADVAPI32.DLL,RegOpenKeyExA);

	HOOKAPI(ADVAPI32.DLL,RegOpenKeyExW);

	HOOKAPI(ADVAPI32.DLL,RegOpenUserClassesRoot);

	HOOKAPI(ADVAPI32.DLL,RegOverridePredefKey);

	HOOKAPI(ADVAPI32.DLL,RegQueryInfoKey);

	HOOKAPI(ADVAPI32.DLL,RegQueryMultipleValues);

	HOOKAPI(ADVAPI32.DLL,RegQueryReflectionKey);

	HOOKAPI(ADVAPI32.DLL,RegQueryValueExA);

	HOOKAPI(ADVAPI32.DLL,RegQueryValueExW);

	HOOKAPI(ADVAPI32.DLL,RegReplaceKeyA);

	HOOKAPI(ADVAPI32.DLL,RegReplaceKeyW);

	HOOKAPI(ADVAPI32.DLL,RegRestoreKeyA);

	HOOKAPI(ADVAPI32.DLL,RegRestoreKeyW);

	HOOKAPI(ADVAPI32.DLL,RegSaveKeyA);

	HOOKAPI(ADVAPI32.DLL,RegSaveKeyW);

	HOOKAPI(ADVAPI32.DLL,RegSaveKeyExA);

	HOOKAPI(ADVAPI32.DLL,RegSaveKeyExW);

	HOOKAPI(ADVAPI32.DLL,RegSetKeySecurity);

	HOOKAPI(ADVAPI32.DLL,RegSetValueExA);

	HOOKAPI(ADVAPI32.DLL,RegSetValueExW);

	HOOKAPI(ADVAPI32.DLL,RegUnLoadKeyA);

	HOOKAPI(ADVAPI32.DLL,RegUnLoadKeyW);

	return TRUE;
}

