#include <memory.h>
#ifdef WIN32
#include <windows.h>
#endif
#include "..\udis86\udis86.h"
#include "Detour.h"

#define MAX_SIZE_INST 13
#define SIZE_JMP_INST 5

struct DetourTrampline {
	DetourTrampline() {};
	unsigned char m_code[SIZE_JMP_INST - 1 + MAX_SIZE_INST + SIZE_JMP_INST];
	PROC m_target;
	PROC m_detour;
	unsigned char m_orig_code[SIZE_JMP_INST];
};

// make_code: copy and adjust no less than code_len bytes of instructions from target address into buf
static int make_code(unsigned char *target, int target_size, unsigned char *buf, int code_len)
{
	ud_t ud_obj;

    ud_init(&ud_obj);
	ud_set_input_buffer(&ud_obj, target, target_size);
    ud_set_mode(&ud_obj, 32);
    ud_set_syntax(&ud_obj, NULL);
	int len = 0;
	while (len < code_len) {
		unsigned char *inst = target + len;
		unsigned char *new_inst = buf + len;
		if (ud_disassemble(&ud_obj)) {
			// opcode: c3 or cb or c2 or ca
			if (ud_obj.mnemonic == UD_Iret || ud_obj.mnemonic == UD_Iretf)
				return 0;
			int instlen = ud_insn_len(&ud_obj);
			memcpy(new_inst, inst, instlen);
			// opcode: e9 or e8
			// recalculate relative address
			if (ud_obj.mnemonic == UD_Ijmp || ud_obj.mnemonic == UD_Icall) {
				unsigned char *addr = (new_inst + 1);
				*(int *)addr = *(int *)addr + (int)inst - (int)new_inst;
			}
			len += instlen;
		}
    }
	return len;
}

// DetourFunction: return a function pointer to the trampline
PROC DetourFunction(PROC target, PROC detour)
{
	struct DetourTrampline *trampline = new DetourTrampline;

	if (trampline == NULL)
		return (PROC)0;
	trampline->m_target = target;
	trampline->m_detour = detour;
	// make new code
	int len = make_code((unsigned char*)target, SIZE_JMP_INST - 1 + MAX_SIZE_INST, trampline->m_code, SIZE_JMP_INST);
	if (len == 0)
		return (PROC)0;
	// reserve target code
	memcpy(trampline->m_orig_code, target, SIZE_JMP_INST);
	trampline->m_code[len] = 0xe9; // jmp
	unsigned char *addr = &trampline->m_code[len + 1];
	*(int *)addr = (int)target + len - ((int)addr + SIZE_JMP_INST - 1);
	// overwrite code at target to point to detour
	unsigned char buf[SIZE_JMP_INST];
	unsigned char *new_code = buf;
	*new_code = 0xe9; // jmp
	new_code++;
	*(int *)new_code = (int)detour - ((int)target + SIZE_JMP_INST);
#ifdef WIN32
	if (WriteProcessMemory(GetCurrentProcess(), target, buf, SIZE_JMP_INST, NULL)) {
		FlushInstructionCache(GetCurrentProcess(), target, SIZE_JMP_INST);
		return (PROC)&trampline->m_code;
	} else {
		delete trampline;
		return (PROC)0;
	}
#endif
}

void DetourRemove(PROC trampline)
{
	struct DetourTrampline *trampline_st = (struct DetourTrampline *)trampline;
	if (trampline_st == NULL)
		return;

#ifdef WIN32
	WriteProcessMemory(GetCurrentProcess(), trampline_st->m_target, trampline_st->m_orig_code, sizeof(trampline_st->m_orig_code), NULL);
	FlushInstructionCache(GetCurrentProcess(), trampline_st->m_target, SIZE_JMP_INST);
#endif
	delete trampline_st;
}
